#!/usr/bin/env python3
"""
Atlas Quick Imports Fixer - —à–≤–∏–¥–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –∑ —ñ–º–ø–æ—Ä—Ç–∞–º–∏
–§–æ–∫—É—Å—É—î—Ç—å—Å—è –Ω–∞ —à–≤–∏–¥–∫–æ–º—É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –Ω–∞–π—á–∞—Å—Ç—ñ—à–∏—Ö –ø—Ä–æ–±–ª–µ–º –∑ —ñ–º–ø–æ—Ä—Ç–∞–º–∏ –≤ –ø—Ä–æ–µ–∫—Ç—ñ
"""

import os
import re
import subprocess
import sys
from pathlib import Path

# –ú–∞–ø–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤ –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è F821
IMPORTS_MAP = {
    "Any": "from typing import Any",
    "Dict": "from typing import Dict",
    "List": "from typing import List",
    "Optional": "from typing import Optional",
    "QWidget": "from PySide6.QtWidgets import QWidget",
    "QAction": "from PySide6.QtWidgets import QAction",
    "QMenu": "from PySide6.QtWidgets import QMenu",
    "QTabBar": "from PySide6.QtWidgets import QTabBar",
    "QListWidgetItem": "from PySide6.QtWidgets import QListWidgetItem",
    "Qt": "from PySide6.QtCore import Qt",
    "WebDriverWait": "from selenium.webdriver.support.wait import WebDriverWait",
    "EC": "from selenium.webdriver.support import expected_conditions as EC",
    "By": "from selenium.webdriver.common.by import By",
    "time": "import time",
    "json": "import json",
    "timedelta": "from datetime import timedelta",
    "LLMManager": "from core.llm_manager import LLMManager",
    "TokenUsage": "from core.token_usage import TokenUsage",
    "ChatWidget": "from ui.chat.chat_widget import ChatWidget",
    "TaskWidget": "from ui.tasks.task_widget import TaskWidget",
    "SettingsWidget": "from ui.settings.settings_widget import SettingsWidget",
    "PluginsWidget": "from ui.plugins.plugins_widget import PluginsWidget",
    "UserManagementWidget": "from ui.agents.user_management_widget import UserManagementWidget",
    "AIAssistantWidget": "from ui.chat.ai_assistant_widget import AIAssistantWidget",
    "get_logger": "from utils.logging_utils import get_logger",
    "e": "Exception as e",  # –î–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤, –∫–æ–ª–∏ 'e' –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±–µ–∑ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è
    "PluginManager": "from ui.plugins.plugin_manager import PluginManager",
}


def find_python_files():
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å—ñ Python —Ñ–∞–π–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç—ñ."""
    files = []
    for root, dirs, filenames in os.walk(".", topdown=True):
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —è–∫—ñ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –Ω–∞ . –∞–±–æ backup_
        dirs[:] = [
            d
            for d in dirs
            if not (d.startswith(".") or d.startswith("backup_") or d == "venv")
        ]
        for filename in filenames:
            if filename.endswith(".py"):
                filepath = os.path.join(root, filename)
                files.append(filepath)
    return files


def add_missing_import(file_path, missing_name):
    """–î–æ–¥–∞—î –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —ñ–º–ø–æ—Ä—Ç —É —Ñ–∞–π–ª."""
    if missing_name not in IMPORTS_MAP:
        print(f"[SKIP] –ù–µ–º–∞—î –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è {missing_name} –≤ {file_path}")
        return False

    with open(file_path, "r", encoding="utf-8") as file:
        content = file.read()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ–º–ø–æ—Ä—Ç –≤–∂–µ —ñ—Å–Ω—É—î
    import_line = IMPORTS_MAP[missing_name]
    if import_line in content:
        return False

    # –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É –∞–±–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —Ñ–∞–π–ª—É
    import_section_end = 0
    for match in re.finditer(r"^(?:import|from)\s+.*?(?:\n|$)", content, re.MULTILINE):
        end = match.end()
        if end > import_section_end:
            import_section_end = end

    if import_section_end > 0:
        new_content = (
            content[:import_section_end]
            + "\n"
            + import_line
            + "\n"
            + content[import_section_end:]
        )
    else:
        new_content = import_line + "\n\n" + content

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
    with open(file_path, "w", encoding="utf-8") as file:
        file.write(new_content)

    print(f"[FIXED] –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç {import_line} –≤ {file_path}")
    return True


def fix_file_undefined_imports(file_path):
    """–í–∏–ø—Ä–∞–≤–ª—è—î –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ —É —Ñ–∞–π–ª—ñ."""
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Ruff –¥–ª—è –ø–æ—à—É–∫—É –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏—Ö —ñ–º–µ–Ω
        result = subprocess.run(
            ["ruff", "check", "--select=F821", file_path],
            capture_output=True,
            text=True,
        )

        if not result.stdout:
            return 0

        fixes_applied = 0
        # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
        pattern = r"F821 Undefined name `(.*?)`"
        for match in re.finditer(pattern, result.stdout):
            missing_name = match.group(1)
            if add_missing_import(file_path, missing_name):
                fixes_applied += 1

        return fixes_applied
    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ {file_path}: {e}")
        return 0


def fix_file_unused_imports(file_path):
    """–í–∏–¥–∞–ª—è—î –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ –∑ —Ñ–∞–π–ª—É."""
    try:
        before_fix = get_file_error_count(file_path, "F401")
        if before_fix == 0:
            return 0

        # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
        subprocess.run(
            ["ruff", "check", "--select=F401", "--fix", file_path], capture_output=True
        )

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —Å–∫—ñ–ª—å–∫–∏ –ø–æ–º–∏–ª–æ–∫ –∑–∞–ª–∏—à–∏–ª–æ—Å—å
        after_fix = get_file_error_count(file_path, "F401")
        fixes_applied = before_fix - after_fix

        if fixes_applied > 0:
            print(
                f"[FIXED] –í–∏–¥–∞–ª–µ–Ω–æ {fixes_applied} –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤ —É {file_path}"
            )

        return fixes_applied
    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤ —É {file_path}: {e}")
        return 0


def fix_file_import_order(file_path):
    """–í–∏–ø—Ä–∞–≤–ª—è—î –ø–æ—Ä—è–¥–æ–∫ —ñ–º–ø–æ—Ä—Ç—ñ–≤ —É —Ñ–∞–π–ª—ñ."""
    try:
        before_fix = get_file_error_count(file_path, "E402")
        if before_fix == 0:
            return 0

        # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—Ä—è–¥–æ–∫ —ñ–º–ø–æ—Ä—Ç—ñ–≤
        subprocess.run(
            ["ruff", "check", "--select=E402,I001", "--fix", file_path],
            capture_output=True,
        )

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —Å–∫—ñ–ª—å–∫–∏ –ø–æ–º–∏–ª–æ–∫ –∑–∞–ª–∏—à–∏–ª–æ—Å—å
        after_fix = get_file_error_count(file_path, "E402")
        fixes_applied = before_fix - after_fix

        if fixes_applied > 0:
            print(f"[FIXED] –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Ä—è–¥–æ–∫ {fixes_applied} —ñ–º–ø–æ—Ä—Ç—ñ–≤ —É {file_path}")

        return fixes_applied
    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø–æ—Ä—è–¥–∫—É —ñ–º–ø–æ—Ä—Ç—ñ–≤ —É {file_path}: {e}")
        return 0


def get_file_error_count(file_path, error_code):
    """–û—Ç—Ä–∏–º—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫ –ø–µ–≤–Ω–æ–≥–æ —Ç–∏–ø—É —É —Ñ–∞–π–ª—ñ."""
    try:
        result = subprocess.run(
            ["ruff", "check", f"--select={error_code}", file_path],
            capture_output=True,
            text=True,
        )

        # –†–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏ –¥–∞–Ω–æ–≥–æ —Ç–∏–ø—É
        count = 0
        for line in result.stdout.splitlines():
            if f": {error_code} " in line:
                count += 1

        return count
    except Exception:
        return 0


def fix_all_import_issues():
    """–í–∏–ø—Ä–∞–≤–ª—è—î –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏ –∑ —ñ–º–ø–æ—Ä—Ç–∞–º–∏ –≤ –ø—Ä–æ–µ–∫—Ç—ñ."""
    python_files = find_python_files()

    total_undefined = 0
    total_unused = 0
    total_order = 0

    print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(python_files)} Python —Ñ–∞–π–ª—ñ–≤")
    print("=" * 50)

    for i, file_path in enumerate(python_files, 1):
        print(f"[{i}/{len(python_files)}] –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É {file_path}...")

        # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
        undefined_fixed = fix_file_undefined_imports(file_path)
        total_undefined += undefined_fixed

        # –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
        unused_fixed = fix_file_unused_imports(file_path)
        total_unused += unused_fixed

        # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—Ä—è–¥–æ–∫ —ñ–º–ø–æ—Ä—Ç—ñ–≤
        order_fixed = fix_file_import_order(file_path)
        total_order += order_fixed

    print("\n" + "=" * 50)
    print(f"‚úÖ –î–æ–¥–∞–Ω–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤: {total_undefined}")
    print(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤: {total_unused}")
    print(f"‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Ä—è–¥–æ–∫ —ñ–º–ø–æ—Ä—Ç—ñ–≤: {total_order}")
    print(f"‚úÖ –í—Å—å–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å: {total_undefined + total_unused + total_order}")


if __name__ == "__main__":
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    if not Path("pyproject.toml").exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –∑ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ—î–∫—Ç—É Atlas")
        sys.exit(1)

    print("üöÄ Atlas Quick Imports Fixer")
    print("=" * 50)

    # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ –ø–æ–º–∏–ª–∫–∏ –∑ —ñ–º–ø–æ—Ä—Ç–∞–º–∏
    fix_all_import_issues()
