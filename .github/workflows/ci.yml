name: Atlas CI - Enhanced Governance Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Weekly security and dependency scan (Sundays at 02:00 UTC)
    - cron: '0 2 * * 0'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov coverage interrogate ruff pre-commit
    
    - name: Run pre-commit hooks
      run: |
        echo "üîß Running pre-commit hooks..."
        pre-commit run --all-files --show-diff-on-failure
    
    - name: Run linting with ruff
      run: |
        echo "üîç Running ruff linting..."
        ruff check . --output-format=github
      continue-on-error: false
    
    - name: Check code formatting with ruff
      run: |
        echo "üìù Checking code formatting..."
        ruff format --check .
      continue-on-error: false
    
    - name: Run type checking with mypy
      run: |
        pip install mypy
        mypy core tools
      continue-on-error: false
    
    - name: Run type checking with mypy
      run: |
        mypy --ignore-missing-imports agents/ utils/ intelligence/ monitoring/
      continue-on-error: false
    
    - name: Run tests with coverage
      run: |
        echo "üß™ Running tests..."
        pytest tests/ --cov=. --cov-config=pyproject.toml --cov-report=xml --cov-report=term-missing --cov-fail-under=80 -v
      env:
        ATLAS_TESTING: "true"
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  performance-regression:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-linux.txt
        pip install pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        pytest tests/performance/ --benchmark-json=benchmark.json || echo "No performance tests found"
      continue-on-error: true
    
    - name: Compare performance with main branch
      run: |
        git checkout main
        pip install -r requirements-linux.txt
        pytest tests/performance/ --benchmark-json=benchmark-main.json || echo "No performance tests on main"
        if [ -f dev-tools/compare_benchmarks.py ]; then
          python dev-tools/compare_benchmarks.py benchmark-main.json benchmark.json
        else
          echo "Performance comparison tool not yet implemented"
        fi
      continue-on-error: true

  security-audit:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-linux.txt
        pip install safety bandit semgrep
    
    - name: Run comprehensive secret scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run comprehensive vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Python security audit with Safety
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report
    
    - name: Static security analysis with Bandit
      run: |
        bandit -r agents/ utils/ intelligence/ monitoring/ tools/ ui/ -f json -o bandit-report.json || true
        bandit -r agents/ utils/ intelligence/ monitoring/ tools/ ui/ --skip B101,B601 -ll
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          trivy-results.sarif

  test-with-coverage:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=core --cov=tools --cov-report=xml
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        fail_ci_if_error: true
