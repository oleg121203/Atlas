# Initialize the core module

"""
Core package for Atlas application.

This package contains the central application logic, configuration,
event handling, plugin system, and module registry.
"""

# Core components
from core.application import AtlasApplication
from core.config import Config, ConfigManager, get_config
from core.event_bus import EventBus
from core.module_registry import ModuleRegistry, ModuleBase
from core.plugin_system import PluginBase, PluginSystem
from core.self_healing import SelfHealingSystem, SelfHealingManager
    print("Using fallback for plugin system components.")

    class PluginRegistry:
        pass

    class PluginBase:
        pass

    class PluginMetadata:
        def __init__(
            self, name, version, description, author, category, dependencies=None
        ):
            self.name = name
            self.version = version
            self.description = description
            self.author = author
            self.category = category
            self.dependencies = dependencies or []

        def to_dict(self):
            return {
                "name": self.name,
                "version": self.version,
                "description": self.description,
                "author": self.author,
                "category": self.category,
                "dependencies": self.dependencies,
            }


from core.module_base import ModuleBase

try:
    from core.module_base import ModuleBase
except ImportError as e:
    print(f"Module base import failed: {e}")
    print("Using fallback for ModuleBase.")

    class ModuleBase:
        def __init__(self, name, description=""):
            self.name = name
            self.description = description
            self.is_initialized = False
            self.config = {}

        def initialize(self, config=None):
            self.config = config or {}
            self.is_initialized = True
            return True

        def shutdown(self):
            self.is_initialized = False

        def get_status(self):
            return {
                "name": self.name,
                "initialized": self.is_initialized,
                "description": self.description,
            }

        def handle_event(self, event_type, event_data):
            return False

        def get_supported_events(self):
            return []


from core.alerting import (
    SEVERITY_CRITICAL,
    SEVERITY_ERROR,
    SEVERITY_INFO,
    SEVERITY_WARNING,
    initialize_alerting,
    raise_alert,
    register_desktop_alert_handler,
    register_email_alert_handler,
    register_ui_alert_handler,
    register_webhook_alert_handler,
)
from core.alerting import alert as alert_user

# Import logging, monitoring, and alerting systems
from core.monitoring import (
    alert,
    get_performance_stats,
    initialize_monitoring,
    register_alert_handler,
    start_monitoring,
    stop_monitoring,
    track_performance,
)
from core.network_client import NetworkClient

__all__ = [
    "AtlasApplication",
    "EventBus",
    "ConfigManager",
    "get_config",
    "PluginRegistry",
    "PluginBase",
    "PluginMetadata",
    "ModuleRegistry",
    "ModuleBase",
    "NetworkClient",
    "get_logger",
    "setup_logging",
    "log_performance",
    "initialize_monitoring",
    "track_performance",
    "get_performance_stats",
    "register_alert_handler",
    "alert",
    "stop_monitoring",
    "start_monitoring",
    "initialize_alerting",
    "alert_user",
    "SEVERITY_INFO",
    "SEVERITY_WARNING",
    "SEVERITY_ERROR",
    "SEVERITY_CRITICAL",
    "register_ui_alert_handler",
    "register_desktop_alert_handler",
    "register_email_alert_handler",
    "register_webhook_alert_handler",
    "raise_alert",
]
