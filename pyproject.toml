[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "atlas-ai-assistant"
version = "1.0.0"
description = "Atlas Universal AI Assistant with Advanced Analytics"
authors = [{ name = "Atlas Development Team", email = "dev@atlas-ai.com" }]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
keywords = ["ai", "assistant", "automation", "analytics", "pyside6"]

[project.urls]
Homepage = "https://github.com/atlas-ai/atlas"
Documentation = "https://atlas-ai.readthedocs.io"
Repository = "https://github.com/atlas-ai/atlas"
"Bug Tracker" = "https://github.com/atlas-ai/atlas/issues"

[project.scripts]
atlas = "main:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "types-requests",
    "types-urllib3",
    "types-setuptools",
    "types-pyyaml",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-copybutton>=0.5.0",
]
performance = [
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    "py-spy>=0.3.14",
]

[tool.ruff]
# Вказуємо цільову версію Python
target-version = "py312"

# Шляхи до коду для аналізу
src = [
    ".",
    "src",
    "core",
    "ui",
    "tools",
    "workflow",
    "intelligence",
    "utils",
    "plugins",
]

# Виключення непотрібних директорій
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "backup_archive",
    "backup_ui",
    "backup_ui_qt",
    "htmlcov",
    "docs/_build",
]

line-length = 120

[tool.ruff.lint]
# Розширений набір правил для кращої якості коду
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "S",   # flake8-bandit (security)
    "C4",  # flake8-comprehensions
    "PTH", # flake8-use-pathlib
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501", # line too long (handled by formatter)
    "C901", # too complex
    "S101", # use of assert
    "S603", # subprocess without shell=True
    "S607", # starting process with partial executable path
]
fixable = ["ALL"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.bandit]
# Configuration for bandit security linter
exclude_dirs = ["backup_archive", "backup_ui", "backup_ui_qt", "tests", ".venv"]
skips = [
    "B101",
    "B601",
    "B602",
    "B603",
] # Skip assert statements and subprocess calls in testing

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py", "**/tests/**"]

[tool.pytest.ini_options]
# Pytest configuration
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--cov=core",
    "--cov=tests",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=75",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: mark a test as an asyncio test",
    "quality: mark tests related to quality assurance",
    "ui: mark tests related to UI components",
    "api: mark tests related to API calls",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["."]
branch = true
parallel = true
context = "${CONTEXT}"
omit = [
    # Backup directories
    "backup_archive/*",
    "backup_ui/*",
    "backup_ui_qt/*",
    # Test files
    "tests/*",
    "*_test.py",
    "test_*.py",
    "conftest.py",
    # Virtual environments
    ".venv/*",
    "venv/*",
    "env/*",
    # Build and cache directories
    "build/*",
    "dist/*",
    "*.egg-info/*",
    "__pycache__/*",
    ".pytest_cache/*",
    ".ruff_cache/*",
    "htmlcov/*",
    # Configuration files
    "setup.py",
    # Scripts and utilities
    "scripts/*",
    "dev-tools/*",
    # Documentation
    "docs/*",
    "*.md",
    "*.rst",
    "*/site-packages/*",
    # Entry points and examples
    "main.py",
    "example.py",
    "*launch*.sh",
    "*activate*.sh",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "except ModuleNotFoundError:",
    "if TYPE_CHECKING:",
]
ignore_errors = true
show_missing = true
precision = 2
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"
